id = \x -> x
tru = \x -> \y -> x
fls = \x -> \y -> y
test = \cond -> \thn -> \els -> cond thn els
testTru = transBool $ test tru tru fls
testFls = transBool $ test fls tru fls
transBool b = test b "true" "false"
andd = \b -> \c -> b c fls
testAnd1 = transBool $ andd tru tru
testAnd2 = transBool $ andd fls tru
nott = \b -> b fls tru  
orr = \b -> \c -> b tru c
testOps1 = transBool $ orr fls (nott fls)
testOps2 = transBool $ nott (orr fls tru)
testOps3 = transBool $ nott fls
pair = \f -> \s -> \b -> b f s
myPair = pair tru fls
first = \p -> p tru
second = \p -> p fls
testPairFst = transBool $ first myPair
testPairSnd = transBool $ second myPair
cons = pair
hd = first
tl = second
isEmpty = \lst -> lst (\h -> \t -> fls)
nil = \w -> tru
list1 = cons 0 (cons 1 (cons 2 nil))
list2 = cons 3 (cons 4 (cons 5 nil))
testListHead = hd list1
testListHeadTail = hd (tl list1)
testNotEmpty = transBool $ isEmpty list1
testEmpty = transBool $ isEmpty (tl (tl (tl list1)))
zero  = \s -> \z -> z
one   = \s -> \z -> s z
two   = \s -> \z -> s (s z)
three = \s -> \z -> s (s (s z))
scc = \n -> \s -> \z -> s (n s z)
one'    = scc zero
two'    = scc one
three'  = scc two
transChurchNums n = n (+1) 0
plus = \m -> \n -> \s -> \z -> m s (n s z)
test3plus2 = transChurchNums $ plus' three two
plus' = \m -> \n -> m scc n
multiply = \m -> \n -> m (plus n) zero
isZero = \n -> n (\x -> fls) tru
